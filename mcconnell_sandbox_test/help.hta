<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
 <HTA:APPLICATION 
     ID="objITHelpdesk"
     APPLICATIONNAME="New HTA Applet"
	 BORDER="thin"
	 CONTEXTMENU="yes"
	 ICON="torch.ico" 
	 MAXIMIZEBUTTON="yes"
     MINIMIZEBUTTON="yes"
	 RESIZE="no"
	 SCROLL="yes"
     SINGLEINSTANCE="no"
     WINDOWSTATE="maximize" />
	 
<!-- METADATA 
	TYPE="typelib" 
	UUID="00000200-0000-0010-8000-00AA006D2EA4"
-->
<meta http-equiv="x-ua-compatible" content="ie=9">
<!-- NOW CSS3 COMPATIBLE -->

<style type = "text/css">
body * {
	font-family: "arial";
	font-size: "12pt !important";
}
dt {
	margin: 1em 0;
}
pre {
	font-family: "arial";
}
dl>dd pre {
	color: #014421;
}
</style>


<script type = "text/javascript" src="jquery/jquery-1.7.2.min.js"></script>
<script type = "text/javascript" src="jquery/ui/jquery-ui.js"></script>
<link rel="stylesheet" href="jquery/ui/jquery-ui.css" />
<script type="text/javascript" src="jquery/fancybox/source/jquery.fancybox.pack.js?v=2.1.6"></script>
<link rel="stylesheet" href="jquery/fancybox/source/jquery.fancybox.css?v=2.1.6" type="text/css" media="screen" />
<script language="vbscript" type="text/vbscript">
	Function HELLO_WORLD()
		HELLO_WORLD = "Again, Hello World!"
	End Function
	Function CONNECT_DB()
		Err.Clear()
		On Error Resume Next
		If ( NOT isObject(objADObackend) OR uCase(typeName(objADObackend)) = "NOTHING" ) Then
			dim blnaccdb: blnaccdb = True
			dim cDSN: dim cMDBB
			If blnaccdb Then
				cDSN = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source="
				cMDBB = "help4.accdb" ' THIS FAILS IF YOU CREATE A LINK TO THE APPLICATION IN AN OUTLOOK EMAIL
				// UH OH! DATA PROVIDER Provider=Microsoft.ACE.OLEDB.12.0 IS NOT PRE-INSTALLED ON MY HOME Win7 MACHINE,
				// AND Microsoft.Jet.OLEDB.4.0 CANNOT READ AN ACCESS 2010 DATABASE FILE (*.accdb)
				// see: https://www.microsoft.com/en-us/download/details.aspx?displaylang=en&id=13255
				// REGARDING THE Microsoft Access Database Engine 2010 Redistributable
				// 2017-02-12: I TRIED INSTALLING THE x-64 VERSION OF THIS - TO NO AVAIL - SO I UNINSTALLED IT.
				// INSTALLING THE FIRST (x-86) VERSION OF IT - THOUGH - SEEMED TO DO THE TRICK. I NEED STILL TO TEST
				// AUTO-INCREMENT. BECAUSE objADObackend.Properties("Jet OLEDB:Engine Type").Value IS NOW = 6 NOT = 5
			Else
				cDSN = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source="
				cMDBB = "2017-02-05/backend.mdb" ' THIS FAILS IF YOU CREATE A LINK TO THE APPLICATION IN AN OUTLOOK EMAIL
				// UH OH! DATA PROVIDER Provider=Microsoft.ACE.OLEDB.12.0 IS NOT PRE-INSTALLED ON MY HOME Win7 MACHINE,
				// AND Microsoft.Jet.OLEDB.4.0 CANNOT READ AN ACCESS 2010 DATABASE FILE (*.accdb)
				// see: https://www.microsoft.com/en-us/download/details.aspx?displaylang=en&id=13255
				// REGARDING THE Microsoft Access Database Engine 2010 Redistributable
				// 2017-02-12: I TRIED INSTALLING THE x-64 VERSION OF THIS - TO NO AVAIL - SO I UNINSTALLED IT.
				// INSTALLING THE FIRST (x-86) VERSION OF IT - THOUGH - SEEMED TO DO THE TRICK. I NEED STILL TO TEST
				// AUTO-INCREMENT. BECAUSE objADObackend.Properties("Jet OLEDB:Engine Type").Value IS NOW = 6 NOT = 5
			End If
			// ONE WAY OR ANOTHER IT NEEDS TO BE HARD-CODED!!!
			// MY SOLUTION: DEFINE IT IN ITS OWN INCLUDE FILE, constants.vbs
			Set objADObackend = CreateObject("ADODB.Connection")
			objADObackend.Mode = adModeReadWrite
			' MsgBox cDSN & cMDBB
			objADObackend.Open(cDSN & cMDBB)

			If objADObackend.Properties("Jet OLEDB:Engine Type").Value = 5 Then
				MsgBox "Jet 4.0 database"
			Else
				MsgBox "Not a Jet 4.0 database"
			End If
						
		End If
		CONNECT_DB = true
		If ( Err.number <> 0 ) Then 
			MsgBox "Unable to Connect to DB..." & Err.description
			CONNECT_DB = false
		End If
		
		strSQL = "INSERT INTO patients " & _
             "(patient_last, patient_first) VALUES ('Shaw','Mia Hamm')"
		objADObackend.Execute strSQL, , 1 + 128
		
		' see: https://books.google.com/books?id=wlLQlMuSwAcC&pg=PA453&lpg=PA453&dq=SELECT+@@Identity+Microsoft.ACE.OLEDB.12.0&source=bl&ots=EnlPkRDrgx&sig=JhHnnDRt-8KSe-MMKF6q8B2bGkc&hl=en&sa=X&ved=0ahUKEwj_lq2Fm43SAhVi0YMKHeVxCagQ6AEIQTAF#v=onepage&q=SELECT%20%40%40Identity%20Microsoft.ACE.OLEDB.12.0&f=false
		
		' see: https://social.msdn.microsoft.com/Forums/en-US/3a261666-d7b1-4c3c-8476-26a4e1ece02f/how-to-display-the-tables-new-id-number-after-saving
		
		' Set cmn= CreateObject("ADODB.Command")
		' Set cmn.ActiveConnection = objADObackend
		' cmn.CommandText = "SELECT @@Identity"
		' cmn.CommandText = "SELECT MAX(patient_id) FROM patients"
		' Set rsNewAutoIncrement = cmn.Execute
		Set rsNewAutoIncrement = objADObackend.Execute("SELECT MAX(patient_id) FROM patients")
		' See: https://msdn.microsoft.com/en-us/library/aa260806(v=vs.60).aspx
		' One thing to keep in mind is that the returned Recordset will always be a read-only, forward-only cursor. This means you can't edit or scroll backwards. If you need a Recordset object with a bit more functionality, then create a Recordset object with the desired property settings. After the settings are in place, use the Recordset object's Open method to execute the query that will return the desired cursor type. We'll talk some more about using cursors in conjunction with recordsets later in the chapter. 
		' rsNewAutoIncrement.MoveFirst
		' Check for errors. The recordset should contain data...
		If rsNewAutoIncrement.EOF Then
			MsgBox "Uh oh..."
		Else
			MsgBox "New Auto-increment value is: " & rsNewAutoIncrement.Fields(0).Value
		End If
	End Function
	
	Function DISCONNECT_DB()
		On Error Resume Next
		If (isObject(objADObackend) and uCase(typeName(objADObackend)) = "CONNECTION") Then
			objADObackend.Close
			Set objADObackend = Nothing
		End If    
		If ( Err.number <> 0 ) Then 
			MsgBox "Unable to Disconnect from the DB... " & Err.description
			DISCONNECT_DB = false
			Exit Function
		End If
		DISCONNECT_DB = true
	End Function
		
</script>
<script language="javascript" type="text/javascript">
	$(document).ready(function(){
		alert(HELLO_WORLD());
		CONNECT_DB();
		DISCONNECT_DB();
	});
</script>
</head>
<body>
	<div>
		Hello World!
	</div>
	<div>
		There are several good resources that - together - spell out how to leverage the ADO Connection, Command object, and Recordset object so that a MS Access database can provide a data store for any HTA applet. Here are a couple of very useful links and code snippets:
	</div>
	<dl>
		<dt>
			<a target = "_blank" href = "https://msdn.microsoft.com/en-us/library/ee251804(v=bts.10).aspx">ADO Data Object Defined Constants List</a><br />
			https://msdn.microsoft.com/en-us/library/ee251804(v=bts.10).aspx
		</dt>
		<dd>
			We have more than one option here: One is described here: <a href = "http://stackoverflow.com/questions/5145607/asp-3-0-declare-ado-constants-w-out-including-adovbs-inc"></a><br />http://stackoverflow.com/questions/5145607/asp-3-0-declare-ado-constants-w-out-including-adovbs-inc
			<pre> 
&lt;!-- METADATA 
	TYPE="typelib" 
	UUID="00000200-0000-0010-8000-00AA006D2EA4"
--&gt;

The other option is to explicit define the constants that you want/need to use. Some examples:
	Const adCmdTable = 2
	Const adCmdStoredProc = 4
	Const adVarChar = 200
	Const adParamInput = 1
	Const adExecuteNoRecords = 128
	Const adCmdText = 1
	adLockReadOnly
			</pre>
		</dd>
		<dt>
			<a target = "_blank" href = "https://support.microsoft.com/EN-US/help/232144">INFO: Jet OLE DB Provider Version 4.0 Supports SELECT @@Identity</a><br />https://support.microsoft.com/EN-US/help/232144
		</dt>
		<dd>
Thanks to this newly added functionality, you can see the newly added auto-increment values in your client-side ActiveX Data Objects (ADO) recordsets in ADO 2.1 and later. When you submit the new row to the Jet provider by calling Update or UpdateBatch (depending on your choice of LockType), the ADO cursor engine generates an INSERT INTO query to create the new row in the table. If the recordset contains an auto-increment field, ADO will also generate a SELECT @@Identity query to retrieve the value generated for that auto-increment field. Note: This feature works only with Microsoft Jet OLEDB 4.0 databases. The earlier versions of Microsoft Jet OLEDB do not support this feature. The following code demonstrates this feature:
			<pre>
Dim cnDatabase As ADODB.Connection
Dim rsNewAutoIncrement As ADODB.Recordset
Dim strConn As String
Dim strSQL As String
Dim strPathToMDB As String

strPathToMDB = "C:\NewJet4.MDB"
strConn = "Provider=Microsoft.Jet.OLEDB.4.0;" & _
           "Data Source=" & strPathToMDB & ";"
Set cnDatabase = New ADODB.Connection
    cnDatabase.Open strConn
    
    strSQL = "CREATE TABLE AutoIncrementTest " & _
             "(ID int identity, Description varchar(40), " & _
             "CONSTRAINT AutoIncrementTest_PrimaryKey PRIMARY KEY (ID))"
    cnDatabase.Execute strSQL, , adCmdText + adExecuteNoRecords
    
    strSQL = "INSERT INTO AutoIncrementTest " & _
             "(Description) VALUES ('AutoIncrement Test')"
    cnDatabase.Execute strSQL, , adCmdText + adExecuteNoRecords
    
    strSQL = "SELECT @@Identity"
    Set rsNewAutoIncrement = New ADODB.Recordset
    rsNewAutoIncrement.Open strSQL, cnDatabase, adOpenForwardOnly, _
                            adLockReadOnly, adCmdText
    MsgBox "New Auto-increment value is: " & rsNewAutoIncrement(0).Value

    rsNewAutoIncrement.Close
    Set rsNewAutoIncrement = Nothing
    strSQL = "DROP TABLE AutoIncrementTest"
    cnDatabase.Execute strSQL, , adCmdText + adExecuteNoRecords
    cnDatabase.Close
Set cnDatabase = Nothing
			</pre>
		</dd>
		<dt>
			<a target = "_blank" href = "https://msdn.microsoft.com/en-us/library/ms524771(v=vs.90).aspx#Improving%20Queries%20with%20the%20Command%20Object">Improving Queries with the Command Object</a><br />https://msdn.microsoft.com/en-us/library/ms524771(v=vs.90).aspx#Improving%20Queries%20with%20the%20Command%20Object
		</dt>
		<dd>
			THIS ENTIRE DOCUMENT IS VERY THOROUGH AND WELL WRITTEN. EVERYTHING YOU WANTED TO KNOW ABOUT ADODB...
			<pre>
'Open a connection using Connection object. Notice that the Command object
'does not have an Open method for establishing a connection.
strConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Data\Inventory.mdb"
Set cnn = Server.CreateObject("ADODB.Connection")
cnn.Open strConnectionString

'Instantiate Command object; use ActiveConnection property to attach
'connection to Command object.
Set cmn= Server.CreateObject("ADODB.Command")
Set cmn.ActiveConnection = cnn

'Define SQL query.
cmn.CommandText = "INSERT INTO Inventory (Material, Quantity) VALUES (?, ?)"

'Save a prepared (or pre-compiled) version of the query specified in CommandText
'property before a Command object's first execution.
cmn.Prepared = True

'Define query parameter configuration information.
cmn.Parameters.Append cmn.CreateParameter("material_type",adVarChar, ,255 )
cmn.Parameters.Append cmn.CreateParameter("quantity",adVarChar, ,255 )

'Define and execute first insert.
cmn("material_type") = "light bulbs"

cmn("quantity") = "40"
cmn.Execute ,,adCmdText + adExecuteNoRecords

'Define and execute second insert.

cmn("material_type") = "fuses"
cmn("quantity") = "600"
cmn.Execute ,,adCmdText + adExecuteNoRecords
			</pre>
		</dd>
		<dt>
			<a target = "_blank" href = "http://stackoverflow.com/a/11412084">So, you want to leverage stored queries in your MS Access database, do you??</a><br />http://stackoverflow.com/a/11412084
		</dt>
		<dd>
			Code snippet:
			<pre>
'You could set a library reference to 
'Microsoft ActiveX Data Objects x.x Library
Dim cmd As Object
Dim cn As Object

Set cmd = CreateObject("ADODB.Command")
Set cn = CreateObject("ADODB.Connection")

'Connection string, see also http://connectionstrings.com
strCon = "Provider=Microsoft.ACE.OLEDB.12.0; " & _
"Data Source=z:\docs\test.accdb"

cn.Open strCon

'Name of the saved query
cmd.CommandText = "UpdateDates"
cmd.CommandType = adCmdStoredProc
cmd.ActiveConnection = cn

'Some parameters.
'http://www.w3schools.com/ADO/met_comm_createparameter.asp
'Make sure you get the type right, you will find details here:
'http://www.w3schools.com/ADO/ado_datatypes.asp
'You will find direction here:
'http://www.w3schools.com/ado/prop_para_direction.asp

'Make sure you get the order right
'adDate = 7, adInteger = 3, adParamInput = 1
cmd.Parameters.Append cmd.CreateParameter("@Date1", 7, 1, , txtDate1)
cmd.Parameters.Append cmd.CreateParameter("@Date2", 7, 1, , txtDate2)
cmd.Parameters.Append cmd.CreateParameter("@Date2", 3, 1, , MyUniqueKey)

'recs : return for records affected
'adExecuteNoRecords = 128 : no records are returned by this query, 
'so this increases efficiency
'http://www.w3schools.com/ADO/ado_ref_command.asp

cmd.Execute recs,,128

'Did it work?
MsgBox "Records updated: " & recs 
			</pre>
		</dd>
		<dt>
			CONNECT_DB() and DISCONNECT_DB() Functions
		</dt>
		<dd>
			<pre>
	dim objADObackend
	Function CONNECT_DB()
		Err.Clear()
		On Error Resume Next
		If ( NOT isObject(objADObackend) OR uCase(typeName(objADObackend)) = "NOTHING" ) Then
			Const cDSN = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source="
			Const cMDBB = "backend.mdb" ' THIS FAILS IF YOU CREATE A LINK TO THE APPLICATION IN AN OUTLOOK EMAIL
			// ONE WAY OR ANOTHER IT NEEDS TO BE HARD-CODED!!!
			// MY SOLUTION: DEFINE IT IN ITS OWN INCLUDE FILE, constants.vbs
			Set objADObackend = CreateObject("ADODB.Connection")
			objADObackend.Mode = adModeReadWrite
			' MsgBox cDSN & cMDBB
			objADObackend.Open(cDSN & cMDBB)
			
			If objADObackend.Properties("Jet OLEDB:Engine Type").Value = 5 Then
				MsgBox "Jet 4.0 database"
			Else
				MsgBox "Not a Jet 4.0 database"
			End If
						
		End If
		CONNECT_DB = true
		If ( Err.number <> 0 ) Then 
			MsgBox "Unable to Connect to DB..." & Err.description
			CONNECT_DB = false
		End If
	End Function
	
	Function DISCONNECT_DB()
		On Error Resume Next
		If (isObject(objADObackend) and uCase(typeName(objADObackend)) = "CONNECTION") Then
			objADObackend.Close
			Set objADObackend = Nothing
		End If    
		If ( Err.number <> 0 ) Then 
			MsgBox "Unable to Disconnect from the DB... " & Err.description
			DISCONNECT_DB = false
			Exit Function
		End If
		DISCONNECT_DB = true
	End Function
		
		
			</pre>
		</dd>
		<dt>
			<a target = "_blank" href = "http://stackoverflow.com/a/17604793/5863730">CSS3 support for HTA</a><br />http://stackoverflow.com/a/17604793/5863730
		</dt>
		<dd>
			To summarize, you have to include such kind of meta line in your HTA to make it support CSS3:
			<pre>
&lt;meta http-equiv="x-ua-compatible" content="ie=9"&gt;
			</pre>

		</dd>
		<dt>
			<a href = "#" onclick = "return false;">link</a><br />#
		</dt>
		<dd>
			
		</dd>
		
		
		
		

	</dl>
</body>
</html>